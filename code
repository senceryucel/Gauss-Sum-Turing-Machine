

; This problem did not have to be solved by using Gauss's sum formula, there were more efficient solutions.
; However, this was the first thing that came to my mind when I read the question, so I decided to implement this inefficient but beautiful algorithm.

; Below lines are explanation of the algorithm in my native language, Turkish. Explanation in English is just below that.

; İstenen accept state Gauss toplam formülüne eşit. Bu formül [ (n * (n+1) / 2 ].
; Bu formülü input'taki "a"ların sayısına eşitlersek, bu sayıya da X dersek:
; 2*X = (n^2 + n) eşitliği sağlanıyor. 
; Algoritma, öncelikle inputtaki "a"ların 2 katı kadar a yazıyor (2*X). 
; Daha sonra, input length'inden başlayıp her adımda 1 azalacak şekilde formüldeki
; (n^2 + n) kadar "s" yazıyor.
; En son, input'taki "a"ların 2 katıyla (2*X) yazdığımız s'leri (n^2 + n) kıyaslıyor.
; Eğer herhangi bir noktada eşitlik sağlanıyorsa, 2*X = n(n+1) sağlanmış demek oluyor.
; Bu durumda da makine accept'e gidiyor.
; Eşitlik sağlanmazsa, makine, initial input hariç yazdığı her şeyi resetleyip,
; her adımda (n = input length-1) olacak şekilde yeni (n^2 + n) deniyor.
; Hiçbir adımda eşitlik sağlanmazsa, halt-reject'e gidiliyor.


;




1 ⊢ ⊢ r 1
1 a a r 1
1 _ # l 2
1 * * * halt-reject

2 a a l 2
2 ⊢ ⊢ r 3

3 a n r 4
3 # # * 6

4 a a r 4
4 # # r 4
4 _ a r 5

5 _ a l 5
5 a a l 5
5 # # l 5
5 n n r 3

6 a a r 6
6 # # r 6
6 _ _ l 7

7 n n l 7
7 h h l 7
7 # # l 7
7 a a l 7
7 ⊢ ⊢ r 11

11 n m r 12
11 # # r halt-accept
11 h h r 11

12 n n r 12
12 # # r 12
12 a a r 12
12 q q r 12
12 _ q l 13

13 n n l 13
13 a a l 13
13 # # l 13
13 q q l 13
13 m m r 14

14 m m r 14
14 n m r 12
14 # # l 15

15 m m l 15
15 h h l 15
15 ⊢ ⊢ r 16

16 m p r 17
16 h h r 16
16 # # r 21

17 # # r 17
17 a a r 17
17 m m r 17
17 q r r 18
17 s s l 20

18 q q r 18
18 s s r 18
18 _ s l 19

19 q q l 19
19 s s l 19
19 r r r 17

20 r q l 20
20 a a l 20
20 # # l 20
20 m m l 20
20 p p r 16

21 # # r 21
21 a a r 21
21 q z r 22
21 s s l 24

22 q q r 22
22 s s r 22
22 _ s l 23

23 s s l 23
23 q q l 23
23 z z r 21

24 z q l 24
24 a a l 24
24 # # l 24
24 p p r 25

25 # # r 25
25 a t r 26
25 q q r eq

26 a a r 26
26 q q r 26
26 c c r 26
26 s c l 27
26 * * * halt-reject

27 q q l 27
27 c c l 27
27 a a l 27
27 t t r 25

eq c c r eq
eq q q r eq
eq _ _ * halt-accept
eq s * r 28

28 q q r 28
28 c _ r 28
28 s _ r 28
28 _ _ l 29

29 _ _ l 29
29 p n l 29
29 # # l 29
29 s _ l 29
29 q _ l 29
29 c _ l 29
29 t a l 29
29 h h l 29
29 ⊢ ⊢ r 30

30 h h r 30
30 n h r 31

31 n n r 31
31 # # r 6


